services:
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9094:9094"
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 20s

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  iot-postgres:
    image: postgres:16
    container_name: iot-postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: iotdb
    ports: [ "5432:5432" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d iotdb" ]
      interval: 5s
      timeout: 3s
      retries: 20

  prometheus:
    image: prom/prometheus:v2.53.1
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      sensor-ingestion-service:
        condition: service_started
      aggregate-service:
        condition: service_started
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./_grafana/provisioning:/etc/grafana/provisioning:ro
      - ./_grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

  api-service:
    build: ./api-service
    depends_on:
      iot-postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: iot-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: iotdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "8099:8080"
      - "8098:8081"
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  aggregate-service:
    build: ./aggregate-service
    environment:
      POSTGRES_HOST: iot-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: iotdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      iot-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8081/actuator/health" ]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    restart: unless-stopped

  sensor-ingestion-service:
    build: ./sensor-ingestion-service
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: iot.readings.raw
      POSTGRES_HOST: iot-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: iotdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      kafka:
        condition: service_healthy
      iot-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8081/actuator/health/readiness" ]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
    restart: unless-stopped

  sensor-simulator:
    build: ./sensor-simulator
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      KAFKA_TOPIC: iot.readings.raw
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

volumes:
  kafka-data:
